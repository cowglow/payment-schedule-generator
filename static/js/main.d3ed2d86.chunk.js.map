{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","components/AppLayout/AppLayout.tsx","components/GeneratorForm/GeneratorForm.tsx","lib/get-month-name/get-month-name.ts","components/ScheduleTable/ScheduleTable.tsx","lib/get-monthly-payments/get-monthly-payments.ts","App.tsx","lib/theme.ts","index.tsx"],"names":["Header","AppBar","position","Toolbar","Typography","variant","useStyles","makeStyles","theme","footer","bottom","width","padding","spacing","Footer","classes","className","color","align","Link","href","rel","AppLayout","children","root","margin","formControl","GeneratorForm","onSubmit","useState","employeeId","setEmployeeId","monthDuration","setMonthDuration","Date","startDate","dateChangeHandler","Card","CardContent","FormControl","fullWidth","InputLabel","htmlFor","Input","id","placeholder","value","onChange","event","currentTarget","utils","DateFnsUtils","DatePicker","label","format","disablePast","type","parseInt","CardActions","Button","onClick","getMonthName","index","ScheduleTable","duration","data","Table","arial-label","TableHead","TableRow","TableCell","TableBody","Array","from","keys","map","entry","salary","getMonth","toDateString","bonuses","getMidMonthDaysArray","start","end","dateArray","push","undefined","current","addMonths","midMonth","_midMonth","getFullYear","getDay","addDays","getLastDaysArray","lastDay","_lastDay","lastDayOfMonth","subDays","App","setId","setDuration","paymentSchedule","setPaymentSchedule","Container","maxWidth","input","payments","endDate","months","getMonthlyPayments","createTheme","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.d3ed2d86.chunk.js","sourcesContent":["import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { Typography } from \"@material-ui/core\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">Payment Schedule Generator</Typography>\n        </Toolbar>\n      </AppBar>\n    </header>\n  );\n};\n","import Typography from \"@material-ui/core/Typography\";\nimport { Link, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    padding: theme.spacing(2, 3),\n  },\n}));\n\nexport const Footer = () => {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        <Link\n          href=\"https://github.com/cowglow/payment-schedule-generator\"\n          rel=\"noreferrer\"\n        >\n          GitHub Repo\n        </Link>\n      </Typography>\n    </footer>\n  );\n};\n","import { Header } from \"../Header/Header\";\nimport { Footer } from \"../Footer/Footer\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\nexport const AppLayout: React.FC<AppLayoutProps> = ({ children }) => (\n  <>\n    <Header />\n    <main>{children}</main>\n    <Footer />\n  </>\n);\n","import { ChangeEvent, SyntheticEvent, useState } from \"react\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\n\ninterface GeneratorFormProps {\n  onSubmit?: (data: GeneratorFormData) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(2, 0),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport const GeneratorForm: React.FC<GeneratorFormProps> = ({ onSubmit }) => {\n  const classes = useStyles();\n  const [employeeId, setEmployeeId] = useState(\"04-1-2019\");\n  const [monthDuration, setMonthDuration] = useState(6);\n  const [startDate, dateChangeHandler] = useState<any>(new Date());\n\n  const processData = (event: SyntheticEvent) => {\n    if (onSubmit) {\n      onSubmit({\n        employeeId,\n        monthDuration,\n        startDate,\n      });\n    }\n  };\n\n  const employeeIdChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    setEmployeeId(value);\n  };\n\n  const monthCountChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    setMonthDuration(parseInt(value));\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <FormControl className={classes.formControl} fullWidth>\n          <InputLabel htmlFor=\"employeeId\">Employee Id</InputLabel>\n          <Input\n            id=\"employeeId\"\n            placeholder=\"xx-x-xxxx\"\n            value={employeeId}\n            onChange={employeeIdChangeHandler}\n          />\n        </FormControl>\n\n        <FormControl className={classes.formControl}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              label=\"Start Date\"\n              id=\"startDate\"\n              value={startDate}\n              onChange={dateChangeHandler}\n              format=\"dd/MM/yyyy\"\n              disablePast\n            />\n          </MuiPickersUtilsProvider>\n        </FormControl>\n\n        <FormControl className={classes.formControl}>\n          <InputLabel htmlFor=\"monthCount\">Length</InputLabel>\n          <Input\n            id=\"monthCount\"\n            type=\"number\"\n            value={monthDuration}\n            onChange={monthCountChangeHandler}\n          />\n        </FormControl>\n      </CardContent>\n      <CardActions>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={processData}\n        >\n          Generate Schedule\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n","export const getMonthName = (index: number) => {\n  return [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ][index];\n};\n","import Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { getMonthName } from \"../../lib/get-month-name/get-month-name\";\n\ninterface ScheduleTableProps {\n  employeeId?: string;\n  duration?: number;\n  data?: Payments;\n}\n\nexport const ScheduleTable: React.FC<ScheduleTableProps> = ({\n  employeeId,\n  duration,\n  data,\n}) => {\n  if (!data) {\n    return <></>;\n  }\n\n  return (\n    <Table arial-label={`Scheduled Payments for ${employeeId}`}>\n      <TableHead>\n        <TableRow>\n          <TableCell>Month</TableCell>\n          <TableCell>Salary</TableCell>\n          <TableCell>Bonus</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {Array.from(Array(duration).keys()).map((entry, index) => (\n          <TableRow key={index}>\n            <TableCell>{getMonthName(data.salary[entry].getMonth())}</TableCell>\n            <TableCell>{data.salary[entry].toDateString()}</TableCell>\n            <TableCell>\n              {data.bonuses[entry]?.toDateString() ?? \"---\"}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n","import { addDays, addMonths, lastDayOfMonth, subDays } from \"date-fns\";\n\nexport const getMonthlyPayments = (startDate: Date, duration: number) => {\n  const endDate = addMonths(startDate, duration - 1);\n\n  return {\n    bonuses: getMidMonthDaysArray(startDate, endDate),\n    salary: getLastDaysArray(startDate, endDate),\n    months: duration,\n  };\n};\n\nconst getMidMonthDaysArray = (start: Date, end: Date) => {\n  const dateArray: (undefined | Date)[] = [];\n  dateArray.push(undefined);\n\n  let current = addMonths(start, 1); // Next month\n\n  while (current <= end) {\n    let midMonth;\n    const _midMonth = new Date(current.getFullYear(), current.getMonth(), 15);\n\n    if (_midMonth.getDay() === 0) {\n      // Sunday\n      midMonth = addDays(_midMonth, 3);\n    } else if (_midMonth.getDay() === 6) {\n      // Saturday\n      midMonth = addDays(_midMonth, 4);\n    } else {\n      midMonth = _midMonth;\n    }\n\n    if (midMonth) {\n      dateArray.push(midMonth);\n    }\n\n    current = addMonths(current, 1);\n  }\n\n  return dateArray;\n};\n\nconst getLastDaysArray = (start: Date, end: Date) => {\n  const dateArray: Date[] = [];\n  let current = new Date(start);\n\n  while (current <= end) {\n    let lastDay;\n    const _lastDay = lastDayOfMonth(new Date(current));\n\n    if (_lastDay.getDay() === 0) {\n      // Sunday\n      lastDay = subDays(_lastDay, 2);\n    } else if (_lastDay.getDay() === 6) {\n      // Saturday\n      lastDay = subDays(_lastDay, 1);\n    } else {\n      lastDay = _lastDay;\n    }\n\n    if (lastDay) {\n      dateArray.push(lastDay);\n    }\n\n    current = addMonths(current, 1);\n  }\n\n  return dateArray;\n};\n","import { useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport { AppLayout } from \"./components/AppLayout/AppLayout\";\nimport { GeneratorForm } from \"./components/GeneratorForm/GeneratorForm\";\nimport { ScheduleTable } from \"./components/ScheduleTable/ScheduleTable\";\nimport { getMonthlyPayments } from \"./lib/get-monthly-payments/get-monthly-payments\";\n\nconst App = () => {\n  const [id, setId] = useState<string | undefined>();\n  const [duration, setDuration] = useState(0);\n  const [paymentSchedule, setPaymentSchedule] = useState<\n    Payments | undefined\n  >();\n\n  const generateSchedule = (input: GeneratorFormData) => {\n    const { employeeId, startDate, monthDuration } = input;\n    const payments = getMonthlyPayments(startDate, monthDuration);\n\n    setId(employeeId);\n    setDuration(monthDuration);\n    setPaymentSchedule(payments);\n  };\n\n  return (\n    <AppLayout>\n      <Container maxWidth=\"sm\">\n        <GeneratorForm onSubmit={generateSchedule} />\n        <ScheduleTable\n          employeeId={id}\n          duration={duration}\n          data={paymentSchedule}\n        />\n      </Container>\n    </AppLayout>\n  );\n};\n\nexport default App;\n","import { createTheme, ThemeOptions } from \"@material-ui/core\";\n\nconst theme: ThemeOptions = {};\n\nexport default createTheme(theme);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport App from \"./App\";\nimport theme from \"./lib/theme\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}